import org.apache.tools.ant.filters.ReplaceTokens

// we change the version "5.0.0.qualifier" by the current build version
// note: if this will change also update the configuration here
def versionFile = 'src/org/eclipse/concierge/Concierge.java'
def versionFileName = 'Concierge.java'
def versionTempDir = 'build/tmp/sourcesCache'
def versionPattern = '5.0.0.qualifier'

compileJava.doFirst {
    copy {
        from(versionFile)
        into(versionTempDir)
    }
    ant.replace(file: versionFile, token: versionPattern, value: version)
}

compileJava.doLast {
    copy {
        from(versionTempDir + '/' + versionFileName)
        into(project.file(versionFile).parent)
    }
}

// add . folder to test classpath, to lookup META-INF/micro-services
sourceSets {
    test {
	    runtimeClasspath += files('.')
    }
}

test {
    // forward a system property for the test JVM(s)
    systemProperty "org.eclipse.concierge.tests.waitAfterFrameworkShutdown", 
    	System.getProperty("org.eclipse.concierge.tests.waitAfterFrameworkShutdown")
}


// make stripped jar with no debug information
// pack200 --repack --strip-debug <stripped-jar> <original-jar>
task strippedJar(type: Exec, dependsOn: jar) {
    def inputFile = new File(jar.destinationDir, jar.archiveName)
    def outputFile = new File(jar.destinationDir, jar.archiveName.replace('.jar', '-nodebug.jar'))

	outputs.files outputFile

    commandLine 'pack200', '--repack', '--strip-debug', outputFile.absolutePath, inputFile.absolutePath
}

publishing {
    publications {
   	    mavenJava(MavenPublication) {
	   	    groupId 'org.eclipse.concierge'
            artifactId 'org.eclipse.concierge'
            version version
       	    from components.java
	       	artifact sourceJar {
                classifier "sources"
            }
       	}
   	}
}
