// Build script for Concierge
// first change using Gerrit

// sample usages:
// Cleanup:                               ./gradlew clean
// Build and run tests:                   ./gradlew test
// Make complete fresh build:             ./gradlew clean build publish assembleDist installDist
// Build and publish to local Maven repo: ./gradlew clean build publishToMavenLocal

buildscript {
  repositories {
    maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local' }
    jcenter()
  }

  dependencies {
    classpath "org.akhikhl.wuff:wuff-plugin:0.0.13-SNAPSHOT"
  }
}

plugins {
	// TODO jhi create p2 repo with this tool?
	// see: https://github.com/stempler/bnd-platform
	// id 'org.standardout.bnd-platform' version '1.2.0'
	// see: https://github.com/akhikhl/wuff-sandbox/tree/master/007_repository
	// id: ''

	// see: https://github.com/netzwerg/gradle-release-plugin
    id 'ch.netzwerg.release' version '1.1.0'
}

// only include in top level project
// apply plugin: 'org.standardout.bnd-platform'
apply plugin: 'org.akhikhl.wuff.eclipse-repository'
apply plugin: 'ch.netzwerg.release'

def qualifier = getQualifier()

// qualifier can be used to replace in Bundle-Version
// for release candidates (RC) this is the qualifier
// otherwise use the build time
def getQualifier() {
    String ver = project.version
    String q
	if(ver.endsWith('.SNAPSHOT')) {
	    q = ver.substring(ver.indexOf("SNAPSHOT"),ver.length()) + "-" + buildTime()
	} else if(ver.substring(0, ver.length()-1).endsWith('.RC')) {
	    // for RC versions: use RCn as qualifier for bundle versions
	    q = ver.substring(ver.indexOf("RC"),ver.length()) + "-" + buildTime()
	} else {
		q = buildTime()
	}
	// for debugging
	// println ("getQualifier: " + q)
	return q
}


// project.version will be read from version.txt
// must be called as function as not initialized in all phases
// in case of SNAPSHOT the qualifier yet contains the SNAPSHOT prefix 
def getProjectVersion() {
    String ver = project.version
    String projVersion
	if(ver.endsWith('-SNAPSHOT')) {
		projVersion = ver.replace ("-SNAPSHOT", "." + qualifier)
	} else if(ver.endsWith('.SNAPSHOT')) {
		projVersion = ver.replace (".SNAPSHOT", "." + qualifier)
	} else {
		projVersion = ver
	}
	// for debugging
	// println ("getProjectVersion: " + projVersion)
	return projVersion
}

allprojects {
	apply plugin: 'distribution'

	group = 'org.eclipse.concierge'
	qualifier = getQualifier()
	version = getProjectVersion()

	// create all TARs as tar.gz compressed
	tasks.withType(Tar){
    	compression = Compression.GZIP
    	extension = 'tar.gz'
	}
}


// configure all java projects
configure(subprojects.findAll {it.name != 'distribution'}) {
	apply plugin: 'java'
	apply plugin: 'maven-publish'

	clean {
    	delete "bin"
    	delete "storage"
    	delete "target"
	}

	sourceCompatibility = 1.5
	targetCompatibility = 1.5
	
	// TODO jhi align directory structure to Maven based one
	sourceSets {
    	main {
        	java {
            	srcDir 'src'
        	}
	        resources {
    	        srcDirs = [ ".", "../distribution/src/config" ]
				include "META-INF/services/**", "META-INF/micro-services", "about.html", "about_files/**"
        	}
	    }
    	test {
        	java {
            	srcDir 'test'
	        }
		}
	}

	compileJava {
		// disable warning: bootstrap class path not set in conjunction with -source 1.5
		options.compilerArgs << '-Xlint:-options'
		// TODO jhi fix warnings, then enable
		// options.compilerArgs << '-Xlint:unchecked'
		// TODO jhi fix deprecated warnings, then enable
		// options.compilerArgs << '-Xlint:deprecation'
	}

	compileTestJava {
		// disable warning: bootstrap class path not set in conjunction with -source 1.5
		options.compilerArgs << '-Xlint:-options'
	}

	dependencies {
	    testCompile group: 'junit', name: 'junit', version: '4.+'
	}

	task sourceJar(type: Jar) {
 	   from sourceSets.main.allJava
	}

	jar {
    	manifest {
			from('META-INF/MANIFEST.MF') {
				eachEntry { details ->
					if (details.key == 'Bundle-Version') {
                    	details.value = details.value.replace ("qualifier", qualifier)
						// println details.key + "=" + details.value
    	            }
        		}
        	}
		}
	}

	// name jar file to given bundle symbolic name and version, NOT to project version
	// as project version is for overall packaging
	// we maintain the bundle version manually (or using bndtools)
	jar.archiveName = jar.manifest.getEffectiveManifest().getAttributes().get("Bundle-SymbolicName") \
						+ "-" + jar.manifest.getEffectiveManifest().getAttributes().get("Bundle-Version") \
						+ ".jar"

	repositories {
		mavenCentral()
   	}

	publishing {
		repositories {
	        maven {
	        // TODO remove completely
	        	// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=467163
	        	// https://repo.eclipse.org/content/repositories/concierge-snapshots/
	        	// https://repo.eclipse.org/content/repositories/concierge-releases/
	        	if(project.version.endsWith('SNAPSHOT')) {
	        	    url "../distribution/build/repo/snapshots"
 		        } else {
	        	    url "../distribution/build/repo/releases"
          		}
        	}
    	}
	}
}


project(':org.eclipse.concierge.extension.permission') {
    dependencies {
        compile project(':org.eclipse.concierge')
    }
}
project(':org.eclipse.concierge.service.permission') {
    dependencies {
        compile project(':org.eclipse.concierge')
    }
}
project(':org.eclipse.concierge.service.packageadmin') {
    dependencies {
        compile project(':org.eclipse.concierge')
    }
}
project(':org.eclipse.concierge.service.startlevel') {
    dependencies {
        compile project(':org.eclipse.concierge')
    }
}
project(':org.eclipse.concierge.service.xmlparser') {
    dependencies {
        compile project(':org.eclipse.concierge')
    }
}
project(':org.eclipse.concierge.shell') {
    dependencies {
        compile project(':org.eclipse.concierge')
    }
}
project(':org.eclipse.concierge.tests.integration') {
    dependencies {
        compile project(':org.eclipse.concierge')
    }
}

// release management
release {
  dependsOn distZip // 'distZip' could e.g be used in combination with the 'application' plugin
  push = false // 'true' would e.g. be useful when triggering the release task on a CI server
  versionSuffix = '.SNAPSHOT' // '.DEV' or '' (empty) could be useful alternatives
// TODO  
//  versionSuffix = qualifier // '.DEV' or '' (empty) could be useful alternatives
}


// task to create a gradle wrapper with used gradle version
task wrapper(type: Wrapper) {
    gradleVersion = '2.6'
    jarFile = '.gradle-wrapper/gradle-wrapper.jar'
}

// helper methods
def buildTime() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmmss')
    return formattedDate
}
